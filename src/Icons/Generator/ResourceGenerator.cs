using System.Drawing;
using System.Text;

namespace Microsoft.Fast.Components.FluentUI.IconsGenerator;

internal class ResourceGenerator
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ResourceGenerator"/> class.
    /// </summary>
    /// <param name="size"></param>
    /// <param name="variant"></param>
    /// <param name="icons"></param>
    public ResourceGenerator(int size, string variant, IEnumerable<Model.Icon> icons)
    {
        Size = size;
        Variant = variant;
        Icons = icons;
    }

    /// <summary>
    /// Gets the size.
    /// </summary>
    public int Size { get; }

    /// <summary>
    /// Gets the variant.
    /// </summary>
    public string Variant { get; }

    /// <summary>
    /// Gets the list of icons.
    /// </summary>
    public IEnumerable<Model.Icon> Icons { get; }

    /// <summary>
    /// Generates the resx file.
    /// </summary>
    /// <returns></returns>
    public string GenerateResx()
    {
        var builder = new StringBuilder();

        builder.AppendLine(@"<?xml version=""1.0"" encoding=""utf-8""?>");
        builder.AppendLine(@"<root>");
        builder.AppendLine(@"  <!--");
        builder.AppendLine(@"    Microsoft ResX Schema");
        builder.AppendLine(@"    Version 2.0");
        builder.AppendLine();
        builder.AppendLine(@"    This code was generated by a tool.");
        builder.AppendLine(@"    Changes to this file may cause incorrect behavior and will be lost if");
        builder.AppendLine(@"    the code is regenerated.");
        builder.AppendLine(@"  -->");
        builder.AppendLine(GetResxHeaders());

        foreach (var icon in Icons)
        {
            var svgContent = icon.GetContent(removeSvgRoot: true);
            var xmlContent = $"<icon size=\"{Size}\" variant=\"{Variant[0]}\" />{svgContent}".Replace("<", "&lt;")
                                                                                             .Replace(">", "&gt;");

            builder.AppendLine($"  <data name=\"{icon.Name}\" xml:space=\"preserve\"> ");
            builder.AppendLine($"    <value>{xmlContent}</value>");
            builder.AppendLine($" </data>");
        }

        builder.AppendLine($"</root>");
        return builder.ToString();
    }

    /// <summary />
    private string GetResxHeaders() =>
         @"  <xsd:schema id=""root"" xmlns="""" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:msdata=""urn:schemas-microsoft-com:xml-msdata"">
    <xsd:import namespace=""http://www.w3.org/XML/1998/namespace"" />
    <xsd:element name=""root"" msdata:IsDataSet=""true"">
      <xsd:complexType>
        <xsd:choice maxOccurs=""unbounded"">
          <xsd:element name=""metadata"">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name=""value"" type=""xsd:string"" minOccurs=""0"" />
              </xsd:sequence>
              <xsd:attribute name=""name"" use=""required"" type=""xsd:string"" />
              <xsd:attribute name=""type"" type=""xsd:string"" />
              <xsd:attribute name=""mimetype"" type=""xsd:string"" />
              <xsd:attribute ref=""xml:space"" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name=""assembly"">
            <xsd:complexType>
              <xsd:attribute name=""alias"" type=""xsd:string"" />
              <xsd:attribute name=""name"" type=""xsd:string"" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name=""data"">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name=""value"" type=""xsd:string"" minOccurs=""0"" msdata:Ordinal=""1"" />
                <xsd:element name=""comment"" type=""xsd:string"" minOccurs=""0"" msdata:Ordinal=""2"" />
              </xsd:sequence>
              <xsd:attribute name=""name"" type=""xsd:string"" use=""required"" msdata:Ordinal=""1"" />
              <xsd:attribute name=""type"" type=""xsd:string"" msdata:Ordinal=""3"" />
              <xsd:attribute name=""mimetype"" type=""xsd:string"" msdata:Ordinal=""4"" />
              <xsd:attribute ref=""xml:space"" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name=""resheader"">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name=""value"" type=""xsd:string"" minOccurs=""0"" msdata:Ordinal=""1"" />
              </xsd:sequence>
              <xsd:attribute name=""name"" type=""xsd:string"" use=""required"" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name=""resmimetype"">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name=""version"">
    <value>2.0</value>
  </resheader>
  <resheader name=""reader"">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name=""writer"">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>";
}
