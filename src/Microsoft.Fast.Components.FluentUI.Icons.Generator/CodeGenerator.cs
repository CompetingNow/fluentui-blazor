using System.Diagnostics;
using System.Text;

namespace Microsoft.Fast.Components.FluentUI.Icons.Generator;

internal class CodeGenerator
{
    /// <summary>
    /// Initializes a new instance of the <see cref="CodeGenerator"/> class.
    /// </summary>
    /// <param name="configuration"></param>
    public CodeGenerator(Configuration configuration)
    {
        Configuration = configuration;
        Logger = (message) => { };
    }

    /// <summary>
    /// Gets or sets the logger.
    /// </summary>
    public Action<string> Logger { get; init; }

    /// <summary>
    /// Gets the configuration.
    /// </summary>
    private Configuration Configuration { get; }

    /// <summary>
    /// Reads all SVG files in the assets folder.
    /// </summary>
    /// <returns></returns>
    public IEnumerable<Model.Icon> ReadAllAssets()
    {
        const string searchPattern = "ic_fluent_*.svg";
        var icons = new List<Model.Icon>();

        Logger.Invoke($"Reading all SVG files in {Configuration.AssetsFolder}.");
        var allFiles = Configuration.AssetsFolder.GetFiles(searchPattern, SearchOption.AllDirectories);

        foreach (var file in allFiles)
        {
            icons.Add(new Model.Icon(file));
        }

        return icons;
    }

    /// <summary>
    /// Generates all classes for the given icons.
    /// </summary>
    /// <param name="icons"></param>
    /// <returns></returns>
    public IEnumerable<FileInfo> GenerateClasses(IEnumerable<Model.Icon> icons)
    {
        var generatedFiles = new List<FileInfo>();
        var allSizes = icons.Select(i => i.Size).Distinct().OrderBy(i => i);
        var allVariants = icons.Select(i => i.Variant).Distinct().OrderBy(i => i);

        foreach (var variant in allVariants)
        {
            foreach (var size in allSizes)
            {
                var filename = $"{variant}{size}.cs";
                var file = new FileInfo(Path.Combine(Configuration.TargetFolder.FullName, filename));
                var iconsForSizeAndVariant = icons.Where(i => i.Size == size && i.Variant == variant).OrderBy(i => i.Name);

                Logger.Invoke($"Generating {file.Name}, containing {iconsForSizeAndVariant.Count()} icons.");
                var classContent = GenerateClass(size, variant, iconsForSizeAndVariant);

                File.WriteAllText(file.FullName, classContent);

                generatedFiles.Add(file);
            }
        }

        return generatedFiles;
    }

    /// <summary />
    private string GenerateClass(int size, string variant, IEnumerable<Model.Icon> icons)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("//     This code was generated by a tool.");
        builder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        builder.AppendLine("//     the code is regenerated.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine();
        builder.AppendLine("namespace " + Configuration.Namespace + ";");
        builder.AppendLine();
        builder.AppendLine("/// <summary />");
        builder.AppendLine("public static partial class " + variant);
        builder.AppendLine("{");
        builder.AppendLine("    /// <summary />");
        builder.AppendLine("    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        builder.AppendLine("    public static partial class Size" + size);
        builder.AppendLine("    {");

        foreach (var icon in icons)
        {
            if (icon.Name.Contains(" Text Underline"))
            {
                Debugger.Break();
            }

            var svgContent = icon.GetContent(removeSvgRoot: true)
                                 .Replace("\"", "\\\"");

            builder.AppendLine($"        /// <summary />");
            builder.AppendLine($"        public static string {icon.Name} {{ get; }} = \"{svgContent}\";");
            builder.AppendLine();
        }

        builder.AppendLine("    }");
        builder.AppendLine("}");

        return builder.ToString();
    }
}
