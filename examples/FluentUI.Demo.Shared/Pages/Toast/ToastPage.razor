@page "/Toast"
@inject ToastManager ToastManager
@inject NavigationManager NavigationManager
@using FluentUI.Demo.Shared.Pages.Toast.Examples
@using Microsoft.Fast.Components.FluentUI

<h1>Toast</h1>

<p>
    Toasts, referred to as “notifications” in the UI, are pop-up notifications that keeps users informed by briefly:
    <ul>
        <li>Confirming an action they took.</li>
        <li>Informing them about a timely event.</li>
        <li>Communicating the status of a process initiated.</li>
    </ul>
</p>
<p>
    The information in a toast is useful and relevant but never critical.
</p>
<ApiDocumentation Component="typeof(FluentToasts)" />
<ApiDocumentation Component="typeof(FluentToast)" />

<h2>Examples</h2>

<DemoSection Title="Default Toast" Component="typeof(ToastDefault)">

</DemoSection>

<DemoSection Title="Toast with options" Component="typeof(ToastDetailled)">

</DemoSection>


<DemoSection Title="Confirmation Toasts" Component="typeof(ToastConfirmationToastCreate)">

</DemoSection>

<FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastManager.ShowSuccess("I'm a Success confirmation with a lot of text to see what a toast looks like when it's really big."))">
    <FluentIcon Name="@FluentIcons.CheckmarkCircle" Size="@IconSize.Size20" Variant="@IconVariant.Filled" Color="@Color.Success" Slot="start" />
    Show Success
</FluentButton>
<FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastManager.ShowInfo("Click to refresh the page",  settings => settings.OnClick = () => NavigationManager.NavigateTo("/", true)))">
    Info Toast with custom action on click
</FluentButton>

<FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastManager.ShowToast(ToastIntent.Custom, "I'm a message with a custom icon", settings => { settings.Icon = (FluentIcons.Delete,Color.Accent, IconVariant.Regular); }))">Toast with custom icon</FluentButton>
<FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastManager.ShowToast(ToastIntent.Custom, "I'm a message without an icon"))">Toast without icon</FluentButton>

<FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastManager.ShowInfo("INFO message with CtA",
    action => { action.Text = "Primary"; }
 ))">Info Toast</FluentButton>

<FluentButton Appearance=Appearance.Neutral @onclick="@(() => ToastManager.ShowInfo("INFO message with CtA", null,
    settings => {
        settings.Timeout = 10;
    }
))">Info Toast</FluentButton>
<hr />


<DemoSection Title="Custom component" Component="typeof(ToastCustomComponent)">

</DemoSection>



<DemoSection Title="Remove toasts" Component="typeof(ToastClearList)" ShowDownloads=false>
    <Description>
        Toasts can be removed by calling <code>ToastManager.Clear...()</code> methods. By default, 
        toasts are removed from the queue as well. To keep toasts in the queue, pass <code>false</code> for the <code>includeQueue</code> parameter.
    </Description>
</DemoSection>

<DemoSection Title="Remove queued toasts" Component="typeof(ToastClearQueue)" ShowDownloads=false>

</DemoSection>


@code
{
    private ToastParameters _toastParameters = default!;
    private ToastParameters _confirmParameters = default!;

    protected override void OnInitialized()
    {
        _toastParameters = new ToastParameters()
        .Add(nameof(MyToastComponent.Title), "I'm a custom toast component with parameters")
        .Add(nameof(MyToastComponent.ToastParam), "I'm a parameter");

        _confirmParameters = new ToastParameters()
        .Add(nameof(ConfirmationToast.PrimaryAction), new ToastAction()
            {
                Text = "Confirm",
                Href = string.Empty,
            });


    }    
}
