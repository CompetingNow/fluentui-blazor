@page "/"

@using FluentUI.Demo.Shared.Pages.Index.Examples

<PageTitle>Fluent UI Blazor Components</PageTitle>

<h1>Welcome to the Fluent UI Blazor Components library</h1>

<h2 id="introduction">Introduction</h2>
<p>
	The <code>Microsoft.Fast.Components.FluentUI</code> package provides a set of <a href="https://blazor.net">Blazor</a> components. Some of the 
	components are  wrappers around Microsoft's official Fluent UI Blazor components. Others are components that leverage the Fluent UI design system
	or make it easier to work with Fluent UI. To get up and running with <code>Microsoft.Fast.Components.FluentUI</code> library, see the Getting Started section below.
</p>
<p>
	The source for the library is hosted in the <a href="https://github.com/microsoft/fluentui-blazor">Fluent UI Blazor</a> repository at GitHub. 
	Documentation on the components is available at the <a href="https://aka.ms/fluentui-blazor">demo site</a> and at <a href="https://docs.microsoft.com/en-us/fluent-ui/web-components/">docs.microsoft.com</a>.
</p>
<p>
	The source for the <code>@@fluentui/web-components</code> is hosted in the <a href="https://github.com/microsoft/fluentui/tree/master/packages/web-components">Fluent UI</a> mono-repository. 
	Documentation on the components is available at <a href="https://docs.microsoft.com/en-us/fluent-ui/web-components/">docs.microsoft.com</a>.<br />
	The Fluent UI Blazor components are built on <a href="https://www.fast.design/">FAST</a> and work in every major browser.
</p>

<h2 id="whatsnew">What's new?</h2>
<p>
	If you are already up-and-running and upgrading from an earlier version of the library, please see the <a href="/WhatsNew">What's new'</a> section 
	for information on (breaking) changes.
</p>

<h2 id="getting-started">Getting Started</h2>
<p>
	To get started using the Fluent UI Blazor components for Blazor, you will first need to install <a href="https://www.nuget.org/packages/Microsoft.Fast.Components.FluentUI/">the official Nuget package for Fluent UI</a> in the project you want to use the library and components. You can use the following command:
</p>
<CodeSnippet>dotnet add package Microsoft.Fast.Components.FluentUI</CodeSnippet>

<h3>Scripts</h3>
<p>
	Next, you need to add the web components script. You can either add the script from CDN directly, or you can install it with NPM, whichever you prefer.
</p>
<p>
	To add the script from CDN use the following markup:
</p>
<CodeSnippet>&lt;script type=&quot;module&quot; src=&quot;https://cdn.jsdelivr.net/npm/@@fluentui/web-components/dist/web-components.min.js&quot;&gt;&lt;/script&gt;</CodeSnippet>

<blockquote>
	<p><strong>Note</strong></p>
	<p>If you prefer to use another CDN, that is entirely possible. Just make sure it is offering the Fluent UI package and you are getting the right <code>web-components.min.js</code> file)</p>
</blockquote>

<p>The markup above always references the latest release of the components. When deploying to production, you will want to ship with a specific version. Here’s an example of the markup for that:</p>
<CodeSnippet>&lt;script type=&quot;module&quot; src=&quot;https://cdn.jsdelivr.net/npm/@@fluentui/web-components@2.5.14/dist/web-components.min.js&quot;&gt;&lt;/script&gt;</CodeSnippet>

<p>The script tag is normally placed in your <code>index.html</code> (<code>_Layout.cshtml</code> for blazor server project) file in the script section at the bottom of the <code>&lt;body&gt;</code>.</p>

<p>If you wish to leverage NPM instead, run the following command:</p>
<CodeSnippet>npm install --save @@fluentui/web-components</CodeSnippet>

<p>You can locate the single file script build in the following location:</p>
<CodeSnippet>node_modules/@@fluentui/web-components/dist/web-components.min.js</CodeSnippet>

<p>Copy this to your <code>wwwroot/script</code> folder and reference it with a script tag as described above.</p>
<blockquote>
	<p><strong>Note</strong></p>
	<p>If you are setting up Fluent UI Blazor components on a Blazor Server project, you will need to escape the <code>@@</code> character by repeating it in the source link. For more information check out the <a href="https://docs.microsoft.com/aspnet/core/mvc/views/razor">Razor Pages syntax documentation</a>.</p>
</blockquote>

<h3>Styles</h3>
<p>
	In order for this library to work as expected, you will need to add the composed scoped CSS file for the components. This can be done by 
	adding the following line to the <code>&lt;head&gt;</code> section of your <code>index.html</code> or <code>_Layout.cshtml</code> file in the 
	project you installed the package:
</p>
<CodeSnippet>&lt;link href="{PROJECT_NAME}.styles.css" rel="stylesheet" /&gt;</CodeSnippet>
<p>
	It is possible that the line is already there (but commented out).
</p>

<h4>Reboot</h4>
<p>
	Reboot is a collection of element-specific CSS changes in a single file to help kickstart building a site with the Fluent UI Blazor components. It provides an elegant, consistent, and simple baseline to build upon.
</p>
<p>
	If you want to use Reboot, you'll need to add to your <code>index.html</code> or <code>_Layout.cshtml</code> file a line that includes the stylesheet (<code>.css</code> file). This can be done by adding the following line to the <code>&lt;head&gt;</code> section:
<CodeSnippet Language="language-html">&lt;link href="_content/Microsoft.Fast.Components.FluentUI/css/reboot.css" rel="stylesheet" /&gt;</CodeSnippet>
</p>
<p>
	It is entirely possible to build a site without using Reboot. If you choose not to use it, please do add the <code>variables.css</code> file (which is otherwise imported through the <code>reboot.css</code> file)
	to your <code>index.html</code> or <code>_Layout.cshtml</code> file in the <code>&lt;head&gt;</code> section like this:
<CodeSnippet Language="language-html">&lt;link href="_content/Microsoft.Fast.Components.FluentUI/css/variables.css" rel="stylesheet" /&gt;</CodeSnippet>
	The file contains a number of CSS variables that are required to be defined for the components to work correctly. 
</p>
<h3>Code</h3>
<p>In your <code>Program.cs</code> file you need to add the following:</p>
<CodeSnippet>builder.Services.AddFluentUIComponents();</CodeSnippet>
<p>This addition makes sure all the necessary services the library uses are setup in a correct way.</p>

<p>When using the 2.1 or higher version of the library, you might need to make some changes here. Please refer to the <a href="/WhatsNew">what's new</a> document for more information.</p>

<p><em>If you're running your application on Blazor Server, make sure a default HttpClient is available by adding the following:</em></p>

<CodeSnippet>builder.Services.AddHttpClient();</CodeSnippet>

<h2 id="using-the-fluentui-web-components">Using the Fluent UI Blazor components</h2>
<p>With the package installed and the script configured, you can begin using the Fluent UI Blazor components in the same way as any other Blazor component. Just be sure to add the following using statement to your views:</p>
<CodeSnippet>@@using Microsoft.Fast.Components.FluentUI</CodeSnippet>

<DemoSection Title="Simple components example" Component="@typeof(IndexSimpleExample)" ShowDownloads=false HideAllButExample="true">
	<Description>
		<p>Here's a small example of a <code>FluentCard</code> with a <code>FluentButton</code> that uses Fluent's "Accent" appearance.</p>
	</Description>
	<ChildContent>
		<CodeSnippet>
@@using Microsoft.Fast.Components.FluentUI

&lt;FluentCard Style="padding: 1.5rem; width: 400px; height: 250px; "&gt;
  &lt;h2&gt;Hello World!&lt;/h2&gt;
  &lt;FluentButton Appearance=&quot;@@Appearance.Accent&quot;&gt;Click Me&lt;/FluentButton&gt;
&lt;/FluentCard&gt;
		</CodeSnippet>
		<p>Renders as:</p>
	</ChildContent>
</DemoSection>

<blockquote>
	<p><strong>Tip</strong></p>
	<p>You can add <code>@@using Microsoft.Fast.Components.FluentUI</code> to the namespace collection in <code>_Imports.razor</code>, so you don't have to add it to every razor page that uses one of the components.</p>
</blockquote>

<h2 id="configuring-the-design-system">Configuring the Design System</h2>
<p>The Fluent UI Blazor components are built on FAST’s Adaptive UI technology, which enables design customization and personalization, while automatically maintaining accessibility. This is accomplished through setting various “Design Tokens”.
	The library exposes all of the defined Design Tokens, which you can use both from code as in a declarative way in your <code>.razor</code> pages. See https://docs.microsoft.com/en-us/fluent-ui/web-components/design-system/design-tokens for more information on how Design Tokens work
</p>

<DemoSection Title="Option 1: Using Design Tokens from C# code" Component="@typeof(IndexDesignTokensCode)" ShowDownloads=false>
	<Description>
		<p>As can be seen in the code below on the Razor tab (with the <code>ref4.Element</code>), it is posible to apply multiple tokens to the same component.</p>
	</Description>
</DemoSection>

<p>For Design Tokens that work with a color value, you must call the <code>ToSwatch()</code> extension method on a string value or use one of the <code>Swatch</code> constructors. This makes sure the color is using a format that Design Tokens can handle. A <code>Swatch</code> has a lot of commonality with the <code>System.Drawing.Color</code> struct. Instead of the values of the components being between 0 and 255, in a <code>Swatch</code> they are expressed as a value between 0 and 1.</p>
<blockquote>
	<p><strong>Note</strong></p>
	<p>The Design Tokens are manipulated through JavaScript interop working with an <code>ElementReference</code>. There is no JavaScript element until after the component is rendered. This means you can only work with the Design Tokens from code after the component has been rendered in <code>OnAfterRenderAsync</code> and not in any earlier lifecycle methods.</p>
</blockquote>

<DemoSection Title="Option 2: Using Design Tokens as components" Component="@typeof(IndexDesignTokensComponent)" CollocatedFiles="@(new[] {"css"})" ShowDownloads=false>
	<Description>
		<p>The Design Tokens can also be used as components in a <code>.razor</code> page directely. It looks like this:</p>
	</Description>
</DemoSection>
<p>To make this work, a link needs to be created between the Design Token component and its child components. This is done with the <code>BackReference="@@context"</code> construct.</p>

<blockquote>
	<p><strong>Note</strong></p>
	<p>Only one Design Token component at a time can be used this way. If you need to set more tokens, use the code approach as described in Option 1 above.</p>
</blockquote>

<h3 id="option-3-using-the-fluentdesignsystemprovider">Option 3: Using the <code>&lt;FluentDesignSystemProvider&gt;</code></h3>
<p>The third way to customize the design in Blazor is to wrap the entire block you want to manipulate in a <code>&lt;FluentDesignSystemProvider&gt;</code>. This special element has a number of properties you can set to configure a subset of the tokens. <strong>Not all tokens are available/supported</strong> and we recommend this to only be used as a fall-back mechanism. The preferred mehod of working with the desgn tokens is to manipulate them from code as described in option 1.</p>
<p>Here's an example of changing the "accent base color" and switching the system into dark mode (in the file <code>app.razor</code>):</p>
<CodeSnippet>&lt;FluentDesignSystemProvider AccentBaseColor=&quot;#464EB8&quot; BaseLayerLuminance=&quot;0&quot;&gt;
	&lt;Router AppAssembly=&quot;@@typeof(App).Assembly&quot;&gt;
		&lt;Found Context=&quot;routeData&quot;&gt;
			&lt;RouteView RouteData=&quot;@@routeData&quot; DefaultLayout=&quot;@@typeof(MainLayout)&quot; /&gt;
		&lt;/Found&gt;
		&lt;NotFound&gt;
			&lt;PageTitle&gt;Not found&lt;/PageTitle&gt;
			&lt;LayoutView Layout=&quot;@@typeof(MainLayout)&quot;&gt;
				&lt;p role=&quot;alert&quot;&gt;Sorry, there&#39;s nothing at this address.&lt;/p&gt;
			&lt;/LayoutView&gt;
		&lt;/NotFound&gt;
	&lt;/Router&gt;
&lt;/FluentDesignSystemProvider&gt;</CodeSnippet>

<blockquote>
	<p><strong>Note</strong></p>
	<p>FluentDesignSystemProvider token attributes can be changed on-the-fly like any other Blazor component attribute.</p>
</blockquote>

<h2 id="colors-for-integration-with-specific-microsoft-products">Colors for integration with specific Microsoft products</h2>
<p>If you are attempting to configure the components for integration into a specific Microsoft product, the following table provides <code>AccentBaseColor</code> values you can use:</p>
<table>
	<thead>
		<tr class="header">
			<th style="text-align:left;">Product</th>
			<th style="text-align:left;">AccentBaseColor</th>
		</tr>
	</thead>
	<tbody>
		<tr class="odd">
			<td>Office</td>
			<td>#D83B01</td>
		</tr>
		<tr class="even">
			<td>Word</td>
			<td>#185ABD</td>
		</tr>
		<tr class="odd">
			<td>Excel</td>
			<td>#107C41</td>
		</tr>
		<tr class="even">
			<td>PowerPoint</td>
			<td>#C43E1C</td>
		</tr>
		<tr class="odd">
			<td>Teams</td>
			<td>#6264A7</td>
		</tr>
		<tr class="even">
			<td>OneNote</td>
			<td>#7719AA</td>
		</tr>
		<tr class="odd">
			<td>SharePoint</td>
			<td>#03787C</td>
		</tr>
		<tr class="even">
			<td>Stream</td>
			<td>#BC1948</td>
		</tr>
	</tbody>
</table>
<em>The library offers an <code>OfficeColor</code> enumeration which contains the specific accent colors for 17 different Office applications. You can see that being used here in the color selection in the top menu bar. </em>

<DemoSection Title="Examples" Component="@typeof(IndexOfficeColors)" ShowDownloads=false>
	<Description><p>The result looks like this when applied to a <code>&lt;FluentButton&gt;</code>:</p></Description>
</DemoSection>

<h2 id="blazor-hybrid">Blazor Hybrid</h2>
<p>
	Starting with the 2.0 release, you can also use this library in your Blazor Hybrid projects. Setup is almost the same as described in the "Getting started" section above, but to get everything to work you'll need to take two extra steps:
</p>
<ol>
	<li>
		You need to add a MAUI specific IStaticAssetService implementation.<br>
		Due to some issues, this file can't be part of the library (yet) so this needs to be added manually to your MAUI Blazor project.<br>
		Create a new class in you project called <code>FileBasedStaticAssetService.cs</code> Replace it's contents with the following:
	</li>
</ol>
<CodeSnippet Language="csharp">using System.Net;
using Microsoft.Fast.Components.FluentUI.Infrastructure;

namespace Microsoft.Fast.Components.FluentUI;

public class FileBasedStaticAssetService : IStaticAssetService
{
	private readonly CacheStorageAccessor _cacheStorageAccessor;

	public FileBasedStaticAssetService(CacheStorageAccessor cacheStorageAccessor)
	{
		_cacheStorageAccessor = cacheStorageAccessor;
	}

	public async Task&lt;string&gt; GetAsync(string assetUrl, bool useCache = true)
	{
		string result = null;

		HttpRequestMessage message = CreateMessage(assetUrl);


		if (useCache)
		{
			// Get the result from the cache
			result = await _cacheStorageAccessor.GetAsync(message);
		}

		if (string.IsNullOrEmpty(result))
		{
			//It not in the cache (or cache not used), read the asset from disk
			result = await ReadData(assetUrl);

			if (!string.IsNullOrEmpty(result))
			{
				if (useCache)
				{
					// If successful, create the response and store in the cache (when used)
					HttpResponseMessage response = new()
					{
						StatusCode = HttpStatusCode.OK,
						Content = new StringContent(result)
					};

					await _cacheStorageAccessor.PutAsync(message, response);
				}
			}
		}

		return result;
	}

	private static HttpRequestMessage CreateMessage(string url) => new(HttpMethod.Get, url);

	private static async Task&lt;string&gt; ReadData(string file)
	{
		using var stream = await FileSystem.OpenAppPackageFileAsync($"wwwroot/{file}");
		using var reader = new StreamReader(stream);

		return await reader.ReadToEndAsync();
	}
}
</CodeSnippet>
<ol start="2">
	<li>
		You need to make some changes in your <code>MauiProgram.cs</code> file<br>
		Make sure the following is added before the <code>return builder.Build()</code> line:
	</li>
</ol>
<CodeSnippet Language="csharp">builder.Services.AddFluentUIComponents(options =>
{
	options.HostingModel = BlazorHostingModel.Hybrid;
});
builder.Services.AddSingleton&lt;IStaticAssetService, FileBasedStaticAssetService&gt;();
</CodeSnippet>

<h2>Use the DataGrid component with EF Core</h2>
<p>
	If you want to use the <code>FluentDataGrid</code> with data provided through EF Core, you need to install an additional package so the 
	grid knows how to resolve queries asynchronously for efficiency.
</p>

<h3>Installation</h3>
Install the package by running the command:
<CodeSnippet>dotnet add package Microsoft.Fast.Components.FluentUI.DataGrid.EntityFrameworkAdapter</CodeSnippet>

<h3>Usage</h3>
In your <code>Program.cs</code> file you need to add the following after the <code>builder.Services.AddFluentUIComponents();</code> line:
<CodeSnippet Language="csharp">builder.Services.AddFluentUIDataGridEntityFrameworkAdapter();</CodeSnippet>


<h2 id="joining-the-community">Joining the Community</h2>
<p>Looking to get answers to questions or engage with us in realtime? Our community is most active <a href="https://discord.gg/FcSNfg4">on Discord</a>. Submit requests and issues on <a href="https://github.com/dotnet/blazor-fluentui/issues/new/choose">GitHub</a>, or join us by contributing on <a href="https://github.com/dotnet/fluentui-blazor/labels/community:good-first-issue">some good first issues via GitHub</a>.</p>
<p>If you don't find a component you’re looking for, it's best to create the issue in our repo <a href="https://github.com/microsoft/fast">here</a> and limit issues on this repo to bugs in the Blazor component wrappers or Blazor-specific features.</p>
<p>We look forward to building an amazing open source community with you!</p>
<h2 id="contact">Contact</h2>
<ul>
	<li>Join the community and chat with us in real-time on <a href="https://discord.gg/FcSNfg4">Discord</a>.</li>
	<li>Submit requests and issues on <a href="https://github.com/microsoft/fluentui-blazor/issues/new/choose">GitHub</a>.</li>
	<li>Contribute by helping out on some of our recommended first issues on <a href="https://github.com/microsoft/fluentui-blazor/labels/community:good-first-issue">GitHub</a>.</li>
</ul>
<h2 id="additional-resources">Additional resources</h2>
<ul>
	<li>The Microsoft <a href="https://learn.microsoft.com/en-us/fluent-ui/web-components/">Fluent UI Blazor components documentation</a></li>
	<li>The <a href="https://fluent-components.azurewebsites.net/?path=/docs/getting-started-overview--page">Fluent UI Blazor components demo</a> site</li>
	<li>The <a href="https://www.fast.design/">FAST</a> site</li>
</ul>